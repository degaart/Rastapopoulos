url: openssl-1.0.2a.tar.gz
extract-dir: openssl-1.0.2a
version: 1.0.2a
build:
    cd "$EXTRACT_DIR" && make

install:
    cd "$EXTRACT_DIR" && make install 
    chmod 0644 "$PREFIX"/lib/libcrypto.* "$PREFIX"/lib/libssl.* || true

Linux/configure:
    #
    # Needs an in-source build
    #
    cd "$EXTRACT_DIR"
    #
    # Problem: on containers, uname -m gives the host machine arch
    # whereas the vm arch may be different
    # So, we need to determine the vm arch by using gcc -dumpmachine
    # and then pick an openssl configuration
    #
    case $(cc -dumpmachine) in
        x86_64-linux-*)
            openssl_config=linux-x86_64
            ;;
        *-linux*)
            openssl_config=linux-elf
            ;;
        *)
            openssl_config=
    esac
    echo "openssl_config: $openssl_config"
    if [ -z "$openssl_config" ]; then
        ./config --prefix="$PREFIX" shared zlib-dynamic
    else
        ./Configure ${openssl_config} --prefix="$PREFIX" shared zlib-dynamic ${CPPFLAGS} ${CFLAGS} ${LDFLAGS}
    fi
    #
    # Disable static libraries installation
    #
    sed 's# libcrypto.a##;s# libssl.a##' Makefile > Makefile.patched
    cp Makefile.patched Makefile

Darwin/configure:
    #
    # This package is so intelligent it doesn't support out-of-source build
    #
    cd "$EXTRACT_DIR"
    #
    # os BUILDENV_OSX_ARCH set, use it as arch, else determine from host arch
    #
    if [ -n "$BUILDENV_OSX_ARCH" ]; then
        openssl_arch="$BUILDENV_OSX_ARCH"
    else
        openssl_arch=$(uname -m)
    fi
    #
    # Then we need to determine to configuration name from arch
    # here are the defined configurations: darwin-ppc-cc, darwin64-ppc-cc, darwin-i386-cc, darwin64-x86_64-cc, iphoneos-cross
    #
    case ${openssl_arch} in
        'ppc')
            openssl_configuration='darwin-ppc-cc'
            ;;
        'ppc64')
            openssl_configuration='darwin64-ppc-cc'
            ;;
        'i386')
            openssl_configuration='darwin-i386-cc'
            ;;
        'x86_64')
            openssl_configuration='darwin64-x86_64-cc'
            ;;
        *)
            echo "Unable to determine openssl configuration from architecture ${openssl_arch}"
            exit 1
    esac
    #
    # And patch Configuration script to include CPPFLAGS, CFLAGS, and LDFLAGS
    # We must do this because autotools is `too unix-centric`
    # And the configuration file happens to contain non-utf8 characters, so sed chokes on it
    #
    LC_ALL=C sed "s|\"${openssl_configuration}\",\"cc:-arch ${openssl_arch}|\"${openssl_configuration}\",\"cc:$CPPFLAGS $CFLAGS $LDFLAGS |" Configure > Configure.tmp
    cp Configure.tmp Configure
    #
    # We can now execute the effing configuration file
    #
    ./Configure \
        ${openssl_configuration} \
        --prefix="$PREFIX" \
        shared \
        no-asm \
        zlib-dynamic
    #
    # Disable installing of static libraries
    # And sed on osx requires a backup extension after -i
    sed -i '.bak' 's# libcrypto.a##;s# libssl.a##' Makefile

detect:
    tmpfile="/tmp/detect-openssl.$$.c"
    trap "rm -f \"$tmpfile\"" EXIT
    cat << "EOF" > "$tmpfile"
        #include <openssl/ssl.h>
        #include <openssl/err.h>
        int main() {
            SSL_library_init ();
            printf("%s\n", SSLeay_version (SSLEAY_VERSION));
            return 0;
        }
    EOF
    LDFLAGS="$LDFLAGS -lssl -lcrypto" buildenv cctest compile_and_run "$tmpfile"|grep -Eo 'OpenSSL[ ]+[^ ]+'|awk '{ print $2 }'

depends:
    zlib

